# Build arguments  
ARG UBUNTU_RELEASE_YEAR=20
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=0
ARG CUDA_MAJOR=11
ARG CUDA_MINOR=8

FROM nvcr.io/nvidia/tensorrt:22.12-py3
# Specify the parent image from which we build
FROM stereolabs/zed:${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}-devel-cuda${CUDA_MAJOR}.${CUDA_MINOR}-ubuntu${UBUNTU_RELEASE_YEAR}.04
# Print Ubuntu version
RUN apt-get update && apt-get install -y lsb-release

# OpenCV Version 
ARG OPENCV_VERSION=4.x


# Install dependencies
RUN apt-get upgrade -y &&\
    # Install build tools, build dependencies and python
    apt-get install --no-install-recommends -y \
	build-essential gcc g++ \
	cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \
	libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
    yasm libatlas-base-dev gfortran libpq-dev \
    libxine2-dev libglew-dev libtiff5-dev zlib1g-dev libavutil-dev libpostproc-dev \ 
    libeigen3-dev python3-dev python3-pip python3-numpy libx11-dev tzdata \
&& rm -rf /var/lib/apt/lists/*

# Set Working directory
WORKDIR /opt


# apt-get 安装
RUN apt-get update
RUN apt-get install software-properties-common -y
RUN apt-get update && apt-get -y upgrade && apt-get -y install ssh vim build-essential cmake gdb git libgtk2.0-dev pkg-config \
    libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
    libdc1394-22-dev qtbase5-dev qtdeclarative5-dev python3-pip zip



# Install OpenCV from Source
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git && \
    cd opencv && \
    mkdir build && \
    cd build && \
    cmake \
	-D CMAKE_BUILD_TYPE=RELEASE \
	-D CMAKE_INSTALL_PREFIX=/usr/ \
	-D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
	-D WITH_V4L=ON \
	-D WITH_QT=OFF \
	-D WITH_OPENGL=ON \
	-D WITH_GSTREAMER=ON \
	-D OPENCV_GENERATE_PKGCONFIG=ON \
	-D OPENCV_ENABLE_NONFREE=ON \
	-D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
	-D INSTALL_PYTHON_EXAMPLES=OFF \
	-D INSTALL_C_EXAMPLES=OFF \
	-D BUILD_EXAMPLES=OFF .. && \
   make -j"$(nproc)" && \
   make install

# pip3 安装
RUN python3 -m pip install -U pip -i https://pypi.tuna.tsinghua.edu.cn/simple && pip3 install torch torchvision mxnet-cu102 onnx-simplifier -i https://pypi.tuna.tsinghua.edu.cn/simple \
    && pip3 install ultralytics -i https://pypi.tuna.tsinghua.edu.cn/simple && pip3 install --ignore-installed -U PyYAML -i https://pypi.tuna.tsinghua.edu.cn/simple
    


# Install Tensorrt_inference
RUN git clone  https://github.com/linghu8812/tensorrt_inference.git && \
    sed -i '/message(STATUS "Find OpenCV libraries: ${OpenCV_LIBRARIES}")/a find_package(yaml-cpp REQUIRED)' tensorrt_inference/project/CMakeLists.txt && \
    sed -i '/set(YAML_INCLUDE ..\/depends\/yaml-cpp\/include)/d' tensorrt_inference/project/CMakeLists.txt &&\
    sed -i '/set(YAML_LIB_DIR ..\/depends\/yaml-cpp\/libs)/d' tensorrt_inference/project/CMakeLists.txt &&\
    cd tensorrt_inference/depends && \
    wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.zip&& \
    unzip yaml-cpp-0.6.3.zip  && \
    rm yaml-cpp-0.6.3.zip && \
    cd yaml-cpp-yaml-cpp-0.6.3/ && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON .. && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j && \
    make install && \
    cd .. &&\
    cd .. &&\
    cd .. &&\
    cd project && \
    mkdir build && cd build &&\
    cmake .. &&\
    make -j 

ARG ROS_DISTRO_ARG
ENV LOGNAME root
ENV ROS_DISTRO="noetic"
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8


# Setup ROS
RUN apt-get update -y || true && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl && \
    sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - && \
    apt-get update || true &&\
    DEBIAN_FRONTEND=noninteractive apt-get install -y ros-$ROS_DISTRO-desktop-full build-essential cmake usbutils libusb-1.0-0-dev git -y --allow-unauthenticated &&\
    echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.bashrc

# Install Packages depending on ROS distro
RUN if [ "$ROS_DISTRO_ARG" = "noetic" ] ; then \
    apt-get install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool ; \
else \
    apt-get install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool ; \
fi

RUN rm -rf /var/lib/apt/lists/*


# #  Install ROS Melodic
# RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' -10 && \
#     apt install curl &&\
#     curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - &&\
#     apt update &&\
#     apt install ros-noetic-desktop -y &&\
#     echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc &&\
#     source ~/.bashrc

# RUN apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential &&\
#     apt install python-rosdep &&\
#     rosdep init &&\
#     rosdep update


#  Create a catkin workspace
# RUN mkdir -p ~/catkin_ws/src && \
#     cd ~/catkin_ws/ && \
#     catkin_make && \
#     source devel/setup.bash


# Source ROS environment and create a catkin workspace
# RUN /bin/bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && \
#                   mkdir -p ~/catkin_ws/src && \
#                   cd ~/catkin_ws/ && \
#                   catkin_make && \
#                   source devel/setup.bash"



RUN cd ~/catkin_ws/src &&\
    git clone https://github.com/Rumarino-Team/Vision-Zed-Ros-Wrapper.git && \
    cd ~/catkin_ws && \
    rosdep init && \
    rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    catkin_make -DCMAKE_BUILD_TYPE=Release && \
    source ./devel/setup.bash




WORKDIR /

 CMD ["bash"]
